name: Slack Alarm Webhook

on:
  pull_request:
    types: [review_requested, synchronize]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  repository_dispatch:
    types: [pr_review_request]
jobs:
  mention_notification:
    name: Mention Notification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install yaml

      - name: Read Slack mapping
        id: slack-mapping
        run: |
          MAPPING=$(cat .github/mention-to-slack.yml)
          echo "mapping<<EOF" >> $GITHUB_OUTPUT
          echo "$MAPPING" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        with:
          script: |
            const yaml = require('yaml');
            const fs = require('fs');

            // PR ÏûëÏÑ±ÏûêÏùò ÎåìÍ∏ÄÏù∏ Í≤ΩÏö∞ Ïä§ÌÇµ
            if (context.eventName === 'pull_request_review_comment') {
              const commentAuthor = context.payload.comment.user.login;
              const prAuthor = context.payload.pull_request.user.login;
              if (commentAuthor === prAuthor) {
                console.log('PR ÏûëÏÑ±ÏûêÏùò ÎåìÍ∏ÄÏù¥ÎØÄÎ°ú ÏïåÎ¶ºÏùÑ Î≥¥ÎÇ¥ÏßÄ ÏïäÏäµÎãàÎã§.');
                return;
              }
            }

            const mappingFile = fs.readFileSync('.github/mention-to-slack.yml', 'utf8');
            const mapping = yaml.parse(mappingFile);

            let prAuthor, prTitle, prUrl, reviewers;

            // Ïù¥Î≤§Ìä∏ ÌÉÄÏûÖÏóê Îî∞Îùº Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            if (context.eventName === 'repository_dispatch') {
              // repository_dispatch Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
              prAuthor = context.payload.client_payload.pr_author;
              prTitle = context.payload.client_payload.pr_title;
              prUrl = context.payload.client_payload.pr_url;
              reviewers = context.payload.client_payload.reviewers.reviewers;
            } else {
              // pull_request Í¥ÄÎ†® Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
              prAuthor = context.payload.pull_request.user.login;
              prTitle = context.payload.pull_request.title;
              prUrl = context.payload.pull_request.html_url;
              
              // Î¶¨Î∑∞Ïñ¥ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
              const { data: reviewData } = await github.rest.pulls.listRequestedReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              reviewers = reviewData.users.map(user => user.login);
            }

            // Slack ID Î≥ÄÌôò
            const authorSlackId = mapping[prAuthor] || prAuthor;
            const formattedAuthor = authorSlackId.startsWith('<@') ? authorSlackId : `<@${authorSlackId}>`;

            const slackReviewers = reviewers
              .map(reviewer => mapping[reviewer] || reviewer)
              .map(id => id.startsWith('<@') ? id : `<@${id}>`)
              .join(', ');

            const message = {
              blocks: [
                {
                  type: "header",
                  text: {
                    type: "plain_text",
                    text: "üîç ÏÉàÎ°úÏö¥ PR Î¶¨Î∑∞ ÏöîÏ≤≠",
                    emoji: true
                  }
                },
                {
                  type: "section",
                  fields: [
                    {
                      type: "mrkdwn",
                      text: `*Ï†úÎ™©:*\n${prTitle}`
                    },
                    {
                      type: "mrkdwn",
                      text: `*ÏûëÏÑ±Ïûê:*\n${formattedAuthor}`
                    }
                  ]
                },
                {
                  type: "section",
                  fields: [
                    {
                      type: "mrkdwn",
                      text: `*Î¶¨Î∑∞Ïñ¥:*\n${slackReviewers}`
                    }
                  ]
                },
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*PR ÎßÅÌÅ¨:*\n${prUrl}`
                  }
                }
              ]
            };

            await fetch(process.env.SLACK_WEBHOOK_URL, {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(message)
            });
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
