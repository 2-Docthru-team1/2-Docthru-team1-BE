// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name         String
  email        String  @unique
  password     String
  salt         String
  refreshToken String  @default("")
  role         Role    @default(normal)
  isVerified   Boolean @default(false)

  requests      Challenge[]     @relation(name: "requests")
  participation Challenge[]     @relation(name: "participation")
  ownWorks      ChallengeWork[] @relation(name: "ownership")
  workLikes     WorkLike[]
  feedbacks     Feedback[]
  abortReasons  AbortReason[] // 관리자 유저에 한함
  likeRecipes   Recipe[]        @relation(name: "recipeLikeRelation")
  notifications Notification[]
}

model Challenge {
  id        String    @id @default(uuid())
  number    Int       @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title       String
  description String
  status      Status
  deadline    DateTime
  isHidden    Boolean
  embedUrl    String
  imageUrl    String
  imageUrl2   String?
  mediaType   MediaType
  monthly     MonthlyType?

  requestUser   User?           @relation(name: "requests", fields: [requestUserId], references: [id], onDelete: SetNull)
  requestUserId String?
  participants  User[]          @relation(name: "participation")
  works         ChallengeWork[]
  abortReason   AbortReason?
  notifications Notification[]
}

model ChallengeWork {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title     String
  content   String
  likeCount Int    @default(0)

  images    WorkImage[]
  workLikes WorkLike[]
  feedbacks Feedback[]

  owner         User?          @relation(name: "ownership", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId       String?
  challenge     Challenge      @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId   String
  notifications Notification[]
}

model WorkImage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  imageUrl String

  work   ChallengeWork @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId String
}

model WorkLike {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?
  challengeWork   ChallengeWork @relation(fields: [challengeWorkId], references: [id], onDelete: Cascade)
  challengeWorkId String
}

model Feedback {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  content String

  owner   User?         @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId String?
  work    ChallengeWork @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId  String
}

model AbortReason {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  content String

  admin       User?     @relation(fields: [adminId], references: [id], onDelete: SetNull)
  adminId     String?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String    @unique
}

model Recipe {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title       String
  ingredients String[]
  benefits    String[]
  likeCount   Int      @default(0)
  category    Category
  direction   String[]
  calories    Int
  carbs       Float
  protein     Float
  fat         Float
  sugars      Float
  sodium      Float
  fiber       Float
  images      String[]

  likeUsers User[] @relation(name: "recipeLikeRelation")
}

model Notification {
  id          String         @id @default(uuid())
  message     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  isRead      Boolean        @default(false)
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  challenge   Challenge      @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String
  work        ChallengeWork? @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId      String?
}

enum Role {
  normal
  admin
}

// Challenge
enum Status {
  pending
  onGoing
  finished
  denied
  canceled // 유저에 의해서
  aborted // 관리자에 의해서
}

enum MediaType {
  youtube
  blog
  recipeWeb
  socialMedia
}

enum Category {
  Traditional
  Bunsik
  Noodle
  BanChan
  Dessert
}

enum MonthlyType {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}
